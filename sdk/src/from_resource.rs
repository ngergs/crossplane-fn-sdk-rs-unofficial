use std::io::{Error, ErrorKind};
use serde_json::Value;
use crate::crossplane::Resource;
use serde::de::DeserializeOwned;
// Helpers to get custom types from the crossplane `Resource` struct

/// Helper to parse a Crossplane resource into a rust type (like those generated by Kopium).
/// Crossplane uses structpb.Struct [here](https://github.com/crossplane/crossplane/blob/b896358bbce847819ad04277d099a568020f4d31/internal/xfn/utils.go#L54)
/// to convert `unstructured.Unstructured` to dynamic protobuf values. Unfortunately this erases all integer types
/// and all we are left with is float. Serde won't accept this for integer typed fields.
/// We therefore try to convert every float field into i64 and keep it This function
/// traverses the input value and try to cast all float values to i64 values. It only changes those where the cast succeeds.
///
/// # Errors
/// - If the value is `None`.
/// - If the .resource field is `None`.
/// - If marshalling the `resource` to an intermediate JSON representation fails.
/// - If unmarshalling the type-fixed JSON representation to the target type fails.
pub fn from_resource<T>(value: Option<Resource>) -> Result<T, Error>
where T: DeserializeOwned{
    let resource = value
        .ok_or(Error::new(ErrorKind::InvalidData, "resource not set"))?
        .resource
        .ok_or(Error::new(
            ErrorKind::InvalidData,
            ".resource field not set",
        ))?;

    let mut  value  = serde_json::to_value(&resource)?;
    json_value_cast_float_to_i64(&mut value);
    Ok(serde_json::from_value(value)?)
}

/// This function traverses the json value and tries to cast all float values to i64 values. It only changes those where the cast succeeds without data loss.
fn json_value_cast_float_to_i64( val: &mut Value){
    match val{
        Value::Number(num)=> {
            #[allow(clippy::cast_possible_truncation)]
            if let Some(num_float) = num.as_f64() && num_float.fract() == 0.0 {
                *val = Value::from(num_float as i64);
            }
        }
        Value::Object(o)=>{
            o.iter_mut().for_each(|(_,v)|json_value_cast_float_to_i64(v));
        }
        Value::Array(a)=>{
            a.iter_mut().for_each(json_value_cast_float_to_i64);
        }
        Value::Null |  Value::Bool(_) |Value::String(_)=> {}
    }
}