use crate::function::composite_function;
use crossplane_fn_sdk_unofficial::clap::Parser;
use crossplane_fn_sdk_unofficial::{run_server, tokio, Args};
use tracing::Level;

pub mod function;

/// The composite used as input for this function.
// Importing the types generated by kopium and opting-in to the default implementations
// for the resource mapping traits from the sdk.
pub mod composite_resource {
    use crossplane_fn_sdk_unofficial::{TryFromResource, TryIntoResource};

    include!("generated/xrd.rs");

    impl TryFromResource for Config {}
    impl TryIntoResource for Config {}
}

fn configure_logging(args: &Args) {
    let mut log_config = tracing_subscriber::fmt().json();
    log_config = if args.debug {
        log_config.with_max_level(Level::DEBUG)
    } else {
        log_config.with_max_level(Level::INFO)
    };
    log_config.init();
}

#[tokio::main]
/// Starts the grpc server and handles sigterm/sigint for shutdown
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let args = Args::parse();
    configure_logging(&args);
    run_server(args, composite_function).await?;
    Ok(())
}
